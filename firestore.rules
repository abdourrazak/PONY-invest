rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Règles pour les utilisateurs - ACCÈS LIBRE POUR ADMIN DASHBOARD
    match /users/{userId} {
      // Lecture libre pour dashboard admin
      allow read: if true;
      
      // Écriture libre pour dashboard admin (création/mise à jour soldes)
      allow create: if true;
      allow update: if true;
    }
    
    // Règles pour les transactions - ACCÈS LIBRE POUR ADMIN DASHBOARD
    match /transactions/{transactionId} {
      // Lecture libre pour tous (dashboard admin non authentifié)
      allow read: if true;
      
      // Création : utilisateur peut créer ses propres transactions (status pending uniquement)
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.status == 'pending';
      
      // Mise à jour libre pour dashboard admin
      allow update: if true;
      
      // Suppression libre pour dashboard admin et utilisateurs
      allow delete: if true;
    }
    
    // Règles pour les collections de requêtes de retrait (legacy)
    match /withdrawalRequests/{requestId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow delete: if false;
    }
    
    // Règles pour les collections de requêtes de dépôt (legacy)
    match /depositRequests/{requestId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow delete: if false;
    }
    
    // Règles pour les données publiques (si nécessaire)
    match /public/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    // Règles par défaut - tout refuser sauf users
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
